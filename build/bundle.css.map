{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Map.svelte",
    "MapTooltip.svelte",
    "App.svelte",
    "Scroller.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport { onMount, setContext } from \"svelte\";\r\n\timport mapbox from \"./lib/mapbox-gl@1.13.2\";\r\n\t// Mapbox source code is bundled due to versioning & ES6 import issues\r\n\t// https://cdn.skypack.dev/-/mapbox-gl@v1.13.2-asizChmwkQobquJNQjgb/dist=es2020,mode=imports,min/optimized/mapbox-gl.js\r\n\r\n\texport let map;\r\n\texport let id = \"map\";\r\n\texport let location = {\r\n\t\tlng: 15,\r\n\t\tlat: 45,\r\n\t\tzoom: 1\r\n\t};\r\n\texport let style = {\r\n\t\t\"version\": 8,\r\n\t\t\"sources\": {},\r\n\t\t\"layers\": []\r\n\t};\r\n\texport let minzoom = 0;\r\n\texport let maxzoom = 14;\r\n\texport let controls = false;\r\n\texport let locate = false;\r\n\texport let tabbable = false;\r\n\r\n\texport let zoom = null;\r\n\texport let center = null;\r\n\texport let interactive = true;\r\n\r\n\tlet container;\r\n\tlet w;\r\n\tlet h;\r\n\tlet options;\r\n\tlet loaded = false;\r\n\r\n\tsetContext(\"map\", {\r\n\t\tgetMap: () => map,\r\n\t});\r\n\t\r\n\t// Interpret location\r\n\tif (location.bounds) {\r\n\t\toptions = { bounds: location.bounds };\r\n\t} else if (typeof location.lng == 'number' && typeof location.lat == 'number') {\r\n\t\toptions = {\r\n\t\t\tcenter: [location.lng, location.lat],\r\n\t\t};\r\n\t\tif (typeof location.zoom == 'number') {\r\n\t\t\toptions.zoom = location.zoom;\r\n\t\t}\r\n\t}\r\n\r\n\tonMount(() => {\r\n\t\tconst link = document.createElement(\"link\");\r\n\t\tlink.rel = \"stylesheet\";\r\n\t\tlink.href = \"https://unpkg.com/mapbox-gl@1.13.2/dist/mapbox-gl.css\";\r\n\r\n\t\tlink.onload = () => {\r\n\t\t\tmap = new mapbox.Map({\r\n\t\t\t\tcontainer,\r\n\t\t\t\tstyle,\r\n\t\t\t\tminZoom: minzoom,\r\n\t\t\t\tmaxZoom: maxzoom,\r\n\t\t\t\tinteractive,\r\n\t\t\t\t...options,\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (controls) {\r\n\t\t\t\tmap.addControl(new mapbox.NavigationControl({showCompass: false}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (locate) {\r\n\t\t\t\tmap.addControl(new mapbox.GeolocateControl());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Get initial zoom level\r\n\t\t\tmap.on(\"load\", () => {\r\n\t\t\t\tzoom = map.getZoom();\r\n\t\t\t\tcenter = map.getCenter();\r\n\t\t\t\tloaded = true;\r\n\t\t\t\t\r\n\t\t\t\t// Prevent map from being tabbable\r\n\t\t\t\tif (!tabbable && document.querySelector(`#${id} canvas`)) {\r\n\t\t\t\t\tdocument.querySelector(`#${id} canvas`).tabIndex = \"-1\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Update zoom level and center when the view changes\r\n\t\t\tmap.on(\"moveend\", () => {\r\n\t\t\t\tzoom = map.getZoom();\r\n\t\t\t\tcenter = map.getCenter();\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tdocument.head.appendChild(link);\r\n\r\n\t\treturn () => {\r\n\t\t\tmap.remove();\r\n\t\t\tlink.parentNode.removeChild(link);\r\n\t\t};\r\n\t});\r\n\r\n\t// Function that forces map to resize to fit parent div, in case it doesn't automatically\r\n\tfunction resizeCanvas() {\r\n\t\tif (loaded) {\r\n\t\t\tlet canvas = document.getElementsByClassName(\"mapboxgl-canvas\");\r\n\t\t  if (canvas[0]) {\r\n\t\t\t  canvas[0].style.width = \"100%\";\r\n\t\t\t  canvas[0].style.height = \"100%\";\r\n\t\t\t  map.resize();\r\n\t\t  }\r\n\t\t}\r\n\t}\r\n\r\n\t// Invoke above function when parent div size changes\r\n\t$: (w || h) && resizeCanvas();\r\n</script>\r\n\r\n<div bind:clientWidth={w} bind:clientHeight={h} bind:this={container} {id}>\r\n\t{#if loaded}\r\n\t\t<slot />\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t:global(.mapboxgl-control-container button) {\r\n\t\tmargin: 0;\r\n\t}\r\n\tdiv {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n  import { getContext } from 'svelte';\r\n  import mapbox from './lib/mapbox-gl@1.13.2';\r\n\t// Mapbox source code is bundled due to versioning & ES6 import issues\r\n\t// https://cdn.skypack.dev/-/mapbox-gl@v1.13.2-asizChmwkQobquJNQjgb/dist=es2020,mode=imports,min/optimized/mapbox-gl.js\r\n\r\n  export let content;\r\n\r\n  const tooltip = new mapbox.Popup({\r\n\t\tcloseButton: false,\r\n\t\tcloseOnClick: false\r\n\t});\r\n\r\n  const { getMap } = getContext('map');\r\n\tconst map = getMap();\r\n  const hoverObj = getContext('hover');\r\n\r\n  function updateTooltip(obj, content) {\r\n    if (obj.id) {\r\n      tooltip\r\n\t\t\t.setLngLat(obj.event.lngLat)\r\n      .setHTML(content ? content : obj.code)\r\n      .addTo(map);\r\n    } else {\r\n      tooltip.remove();\r\n    }\r\n  }\r\n\r\n  $: updateTooltip($hoverObj, content);\r\n</script>\r\n\r\n<style>\r\n  :global(.mapboxgl-popup-content) {\r\n\t\tpadding: 5px 10px !important;\r\n\t}\r\n</style>",
    "<!-- \r\n  # ============================================================================ #\r\n  #  ............... script ...............\r\n-->\r\n\r\n<script>\r\n  // # ============================================================================ #\r\n  // # Imports\r\n  import { onMount } from 'svelte';\r\n  import Scroller from './layout/Scroller.svelte';\r\n  import {\r\n    Map,\r\n    MapSource,\r\n    MapLayer,\r\n    MapTooltip,\r\n  } from '../libs/@onsvisual/svelte-maps';\r\n  import { getData, getColor, getTopo } from './utils.js';\r\n  import bbox from '@turf/bbox';\r\n\r\n  // # ============================================================================ #\r\n  // # Map objects\r\n\r\n  const colors = {\r\n    seq5: [\r\n      'rgb(234, 236, 177)',\r\n      'rgb(169, 216, 145)',\r\n      'rgb(0, 167, 186)',\r\n      'rgb(0, 78, 166)',\r\n      'rgb(0, 13, 84)',\r\n    ],\r\n    div10: [\r\n      '#67001f',\r\n      '#b2182b',\r\n      '#d6604d',\r\n      '#f4a582',\r\n      '#fddbc7',\r\n      '#d1e5f0',\r\n      '#92c5de',\r\n      '#4393c3',\r\n      '#2166ac',\r\n      '#053061',\r\n    ],\r\n  };\r\n\r\n  const paBounds = {\r\n    url: './data/geo_counties.json',\r\n    layer: 'geog',\r\n    code: 'AREANM',\r\n  };\r\n  const stateBounds = {\r\n    url: './data/geo_states.json',\r\n    layer: 'geog',\r\n    code: 'AREANM',\r\n  };\r\n  const bounds = {\r\n    pa: [\r\n      [-80.519851, 38.788657],\r\n      [-66.885444, 47.459833],\r\n    ],\r\n  };\r\n\r\n  // Bindings\r\n  let map;\r\n\r\n  // Data\r\n  let data = {};\r\n  let geojson;\r\n  let geojson_state;\r\n\r\n  // State\r\n  let zoom;\r\n  let center = {};\r\n  let hovered, selected;\r\n\r\n  // Get geometry for geojson maps\r\n  getTopo(paBounds.url, paBounds.layer).then((res) => {\r\n    geojson = res;\r\n    console.log(`geojson`);\r\n    console.log(geojson);\r\n  });\r\n  getTopo(stateBounds.url, stateBounds.layer).then((res) => {\r\n    geojson_state = res;\r\n    console.log(`geojson_state`);\r\n    console.log(geojson_state);\r\n  });\r\n\r\n  // Get data for geojson maps\r\n  getData('./data/data_county.csv').then((res) => {\r\n    data.pa = res;\r\n  });\r\n\r\n  // Functions for map component\r\n  function fitBounds(bounds) {\r\n    if (map) {\r\n      map.fitBounds(bounds, { animate: true, padding: 30 });\r\n    }\r\n  }\r\n  function fitById(id) {\r\n    if (geojson && id) {\r\n      let feature = geojson.features.filter(\r\n        (d) => d.properties.AREANM == id\r\n      )[0];\r\n      let bbox_tmp = bbox(feature.geometry);\r\n\r\n      fitBounds(bbox_tmp);\r\n    }\r\n  }\r\n\r\n  // # ============================================================================ #\r\n  // # Scroller Setup\r\n  const threshold = 0.65;\r\n  let id = {}; // Object to hold visible section IDs of Scroller components\r\n  let idPrev = {}; // Object to keep track of previous IDs, to compare for changes\r\n  onMount(() => {\r\n    idPrev = { ...id };\r\n  });\r\n  function runActions(codes = []) {\r\n    //// Code to run Scroller actions when new caption IDs come into view\r\n    codes.forEach((code) => {\r\n      if (id[code] != idPrev[code]) {\r\n        // if caption id changes then run then run following code to update chart\r\n        if (actions[code][id[code]]) {\r\n          actions[code][id[code]]();\r\n        }\r\n        idPrev[code] = id[code];\r\n      }\r\n    });\r\n  }\r\n\r\n  $: {\r\n    // Run above code when 'id' object changes\r\n    if (id) {\r\n      runActions(Object.keys(actions));\r\n    }\r\n  }\r\n\r\n  // # ============================================================================ #\r\n  // #### Scroller Action\r\n\r\n  let showSources = true;\r\n  let visLayers = true;\r\n  let fill = false;\r\n  let boundaries = false;\r\n  let stateBoundaries = false;\r\n  let highlight = false;\r\n  let colorKey;\r\n  let actions = {\r\n    map: {\r\n      map01: () => {\r\n        console.log(`######### map01`);\r\n        fitBounds(bounds.pa);\r\n        boundaries = false;\r\n        fill = false;\r\n        highlight = false;\r\n        stateBoundaries = false;\r\n      },\r\n      map02: () => {\r\n        console.log(`######### map02`);\r\n        fitBounds(bounds.pa);\r\n        boundaries = true;\r\n        fill = false;\r\n        highlight = false;\r\n        stateBoundaries = false;\r\n      },\r\n      map03: () => {\r\n        console.log(`######### map03`);\r\n        fitBounds(bounds.pa);\r\n        boundaries = false;\r\n        fill = true;\r\n        colorKey = 'color_age_med';\r\n        highlight = true;\r\n        stateBoundaries = false;\r\n      },\r\n      map04: () => {\r\n        console.log(`######### map04`);\r\n        fitBounds(bounds.pa);\r\n        boundaries = false;\r\n        fill = true;\r\n        colorKey = 'color_salary';\r\n        highlight = true;\r\n        stateBoundaries = false;\r\n      },\r\n      map05: () => {\r\n        console.log(`######### map05`);\r\n        fitById('Philadelphia, PA');\r\n        boundaries = false;\r\n        fill = true;\r\n        colorKey = 'color_salary';\r\n        highlight = true;\r\n        stateBoundaries = false;\r\n      },\r\n      map06: () => {\r\n        console.log(`######### map06`);\r\n        fitBounds(bounds.pa);\r\n        boundaries = true;\r\n        fill = false;\r\n        highlight = false;\r\n        stateBoundaries = true;\r\n      },\r\n    },\r\n  };\r\n</script>\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  ............... scrolly ...............\r\n-->\r\n\r\n<Scroller {threshold} bind:id={id['map']} splitscreen={true}>\r\n  <div slot=\"background\">\r\n    <figure>\r\n      <div class=\"col-full height-full\">\r\n        <Map\r\n          id=\"map\"\r\n          style=\"./data/style-osm.json\"\r\n          location={{ bounds: bounds.pa }}\r\n          bind:map\r\n          bind:zoom\r\n          bind:center\r\n        >\r\n          <MapSource\r\n            id=\"paBounds\"\r\n            type=\"geojson\"\r\n            data={geojson}\r\n            promoteId={paBounds.code}\r\n            maxzoom={13}\r\n          >\r\n            <MapLayer\r\n              id=\"boundaries\"\r\n              custom={{\r\n                stateBoundaries: stateBoundaries,\r\n                boundaries: boundaries,\r\n                fill: fill,\r\n              }}\r\n              type=\"line\"\r\n              paint={{\r\n                'line-color': 'black',\r\n                'line-width': 2,\r\n              }}\r\n            />\r\n            <MapLayer\r\n              id=\"fill\"\r\n              custom={{\r\n                stateBoundaries: stateBoundaries,\r\n                boundaries: boundaries,\r\n                fill: fill,\r\n              }}\r\n              data={data.pa}\r\n              type=\"fill\"\r\n              hover={true}\r\n              {colorKey}\r\n              bind:hovered\r\n              select={true}\r\n              bind:selected\r\n              paint={{\r\n                'fill-color': [\r\n                  'case',\r\n                  ['!=', ['feature-state', 'color'], null],\r\n                  ['feature-state', 'color'],\r\n                  'rgba(255, 255, 255, 0)',\r\n                ],\r\n                'fill-opacity': 0.7,\r\n              }}\r\n            >\r\n              <MapTooltip content={`Code: ${hovered}`} />\r\n            </MapLayer>\r\n            <MapLayer\r\n              id=\"highlight\"\r\n              custom={{\r\n                boundaries: boundaries,\r\n                fill: fill,\r\n                highlight: highlight,\r\n              }}\r\n              type=\"line\"\r\n              paint={{\r\n                'line-color': [\r\n                  'case',\r\n                  ['==', ['feature-state', 'selected'], true],\r\n                  'black',\r\n                  ['==', ['feature-state', 'hovered'], true],\r\n                  'orange',\r\n                  'rgba(255, 255, 255, 0)',\r\n                ],\r\n                'line-width': [\r\n                  'case',\r\n                  ['==', ['feature-state', 'selected'], true],\r\n                  2,\r\n                  1,\r\n                ],\r\n              }}\r\n            />\r\n          </MapSource>\r\n          <MapSource\r\n            id=\"stateBounds\"\r\n            type=\"geojson\"\r\n            data={geojson_state}\r\n            promoteId={stateBounds.code}\r\n            maxzoom={13}\r\n          >\r\n            <MapLayer\r\n              id=\"stateBoundaries\"\r\n              custom={{\r\n                stateBoundaries: stateBoundaries,\r\n                boundaries: boundaries,\r\n                fill: fill,\r\n              }}\r\n              type=\"line\"\r\n              paint={{\r\n                'line-color': 'red',\r\n                'line-width': 5,\r\n              }}\r\n            />\r\n          </MapSource>\r\n        </Map>\r\n        <div class=\"stickDev\">\r\n          {id.map}\r\n        </div>\r\n      </div>\r\n    </figure>\r\n  </div>\r\n\r\n  <div slot=\"foreground\">\r\n    <section data-id=\"map01\">\r\n      <div class=\"col-medium\">\r\n        <p><strong>OSM base map</strong></p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"map02\">\r\n      <div class=\"col-medium\">\r\n        <p><strong>add boundaries</strong></p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"map03\">\r\n      <div class=\"col-medium\">\r\n        <p><strong>add median age data layer</strong></p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"map04\">\r\n      <div class=\"col-medium\">\r\n        <p><strong>show salary layer</strong></p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"map05\">\r\n      <div class=\"col-medium\">\r\n        <p><strong>zoom in on a specific unit</strong></p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"map06\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          <strong\r\n            >Lets go back to boundaries and add a layer for state boundaries.</strong\r\n          >\r\n        </p>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</Scroller>\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  ............... style ...............\r\n-->\r\n<style>\r\n  /* Styles specific to elements within the demo */\r\n  :global(svelte-scroller-foreground) {\r\n    pointer-events: none !important;\r\n  }\r\n  :global(svelte-scroller-foreground section div) {\r\n    pointer-events: all !important;\r\n  }\r\n  select {\r\n    max-width: 350px;\r\n  }\r\n  .stickDev {\r\n    position: fixed;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: white;\r\n    padding: 10px;\r\n  }\r\n  .chart {\r\n    margin-top: 45px;\r\n    width: calc(100% - 5px);\r\n  }\r\n  .chart-full {\r\n    margin: 0 20px;\r\n  }\r\n  .chart-sml {\r\n    font-size: 0.85em;\r\n  }\r\n  /* The properties below make the media DIVs grey, for visual purposes in demo */\r\n  .media {\r\n    background-color: #f0f0f0;\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n    -ms-flex-flow: column;\r\n    flex-flow: column;\r\n    -webkit-box-pack: center;\r\n    -ms-flex-pack: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    color: #aaa;\r\n  }\r\n</style>\r\n",
    "<script context=\"module\">\r\n  // Based on svelte-scroller by Rich Harris\r\n  // https://github.com/sveltejs/svelte-scroller\r\n  // Patched to transpile to IE 11 and allow for split-screen view option\r\n\r\n\tconst handlers = [];\r\n\tlet manager;\r\n\r\n\tif (typeof window !== 'undefined') {\r\n\t\tconst run_all = () => handlers.forEach(fn => fn());\r\n\r\n\t\twindow.addEventListener('scroll', run_all);\r\n\t\twindow.addEventListener('resize', run_all);\r\n\t}\r\n\r\n\tif (typeof IntersectionObserver !== 'undefined') {\r\n\t\tconst map = new Map();\r\n\r\n\t\tconst observer = new IntersectionObserver((entries, observer) => {\r\n\t\t\tentries.forEach(entry => {\r\n\t\t\t\tconst update = map.get(entry.target);\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\r\n\t\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t\tif (index === -1) handlers.push(update);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdate();\r\n\t\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, {\r\n\t\t\trootMargin: '400px 0px' // TODO why 400?\r\n\t\t});\r\n\r\n\t\tmanager = {\r\n\t\t\tadd: ({ outer, update }) => {\r\n\t\t\t\tconst { top, bottom } = outer.getBoundingClientRect();\r\n\r\n\t\t\t\tif (top < window.innerHeight && bottom > 0) handlers.push(update);\r\n\r\n\t\t\t\tmap.set(outer, update);\r\n\t\t\t\tobserver.observe(outer);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ outer, update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\r\n\t\t\t\tmap.delete(outer);\r\n\t\t\t\tobserver.unobserve(outer);\r\n\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tmanager = {\r\n\t\t\tadd: ({ update }) => {\r\n\t\t\t\thandlers.push(update);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\t// config\r\n\texport let top = 0;\r\n\texport let bottom = 1;\r\n\texport let threshold = 0.5;\r\n\texport let query = 'section';\r\n\texport let parallax = false;\r\n\r\n\t// bindings\r\n\texport let index = 0;\r\n\texport let count = 0;\r\n\texport let offset = 0;\r\n\texport let progress = 0;\r\n\texport let visible = false;\r\n\texport let splitscreen = false; // Add class to allow for split screen option\r\n\texport let id = null;\r\n\r\n\tlet outer;\r\n  let bgContainer; // IE patch. Container binding to update inline style\r\n\tlet foreground;\r\n\tlet background;\r\n\tlet left;\r\n\tlet sections;\r\n\tlet wh = 0;\r\n\tlet fixed;\r\n\tlet offset_top;\r\n\tlet width = 1;\r\n\tlet height;\r\n\tlet inverted;\r\n\r\n\t$: top_px = Math.round(top * wh);\r\n\t$: bottom_px = Math.round(bottom * wh);\r\n\t$: threshold_px = Math.round(threshold * wh);\r\n\r\n\t$: (top, bottom, threshold, parallax, update());\r\n\r\n\tonMount(() => {\r\n\t\tsections = foreground.querySelectorAll(query);\r\n\t\tcount = sections.length;\r\n\r\n\t\tupdate();\r\n\r\n\t\tconst scroller = { outer, update };\r\n\r\n\t\tmanager.add(scroller);\r\n\t\treturn () => manager.remove(scroller);\r\n\t});\r\n\r\n\t// IE patch. BG container style (fixed/unfixed) set via function\r\n  function setFixed() {\r\n    if (bgContainer) {\r\n      let style = `position: ${fixed ? 'fixed' : 'absolute'}; top: 0; transform: translate(0, ${offset_top}px); width: ${width}px; z-index: ${inverted ? 3 : 1};`;\r\n      bgContainer.style.cssText = style;\r\n    }\r\n  }\r\n\r\n\tfunction update() {\r\n\t\tif (!foreground) return;\r\n\r\n\t\t// re-measure outer container\r\n\t\tconst bcr = outer.getBoundingClientRect();\r\n\t\tleft = bcr.left;\r\n\t\twidth = bcr.right - bcr.left;\r\n\r\n\t\t// determine fix state\r\n\t\tconst fg = foreground.getBoundingClientRect();\r\n\t\tconst bg = background.getBoundingClientRect();\r\n\r\n\t\tvisible = fg.top < wh && fg.bottom > 0;\r\n\r\n\t\tconst foreground_height = fg.bottom - fg.top;\r\n\t\tconst background_height = bg.bottom - bg.top;\r\n\r\n\t\tconst available_space = bottom_px - top_px;\r\n\t\tprogress = (top_px - fg.top) / (foreground_height - available_space);\r\n\r\n\t\tif (progress <= 0) {\r\n\t\t\toffset_top = 0;\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      } // Non-IE specific patch to avoid setting style repeatedly\r\n\t\t} else if (progress >= 1) {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? (foreground_height - background_height)\r\n\t\t\t\t: (foreground_height - available_space);\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      }\r\n\t\t} else {\r\n\t\t\toffset_top = parallax ?\r\n\t\t\t\tMath.round(top_px - progress * (background_height - available_space)) :\r\n\t\t\t\ttop_px;\r\n      if (!fixed) {\r\n        fixed = true;\r\n        setFixed();\r\n      }\r\n\t\t}\r\n\r\n\t\tfor (index = 0; index < sections.length; index += 1) {\r\n\t\t\tconst section = sections[index];\r\n\t\t\tconst { top } = section.getBoundingClientRect();\r\n\r\n\t\t\tconst next = sections[index + 1];\r\n\t\t\tconst bottom = next ? next.getBoundingClientRect().top : fg.bottom;\r\n\r\n\t\t\toffset = (threshold_px - top) / (bottom - top);\r\n\t\t\tid = section.dataset.id ? section.dataset.id : null;\r\n\t\t\tif (bottom >= threshold_px) break;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={wh}/>\r\n\r\n<svelte-scroller-outer bind:this={outer} class:splitscreen>\r\n\t<svelte-scroller-background-container class='background-container' bind:this={bgContainer}>\r\n\t\t<svelte-scroller-background bind:this={background}>\r\n\t\t\t<slot name=\"background\"></slot>\r\n\t\t</svelte-scroller-background>\r\n\t</svelte-scroller-background-container>\r\n\r\n\t<svelte-scroller-foreground bind:this={foreground}>\r\n\t\t<slot name=\"foreground\"></slot>\r\n\t</svelte-scroller-foreground>\r\n</svelte-scroller-outer>\r\n\r\n<style>\r\n\tsvelte-scroller-outer {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-background {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground::after {\r\n\t\tcontent: ' ';\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\tsvelte-scroller-background-container {\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t\tpointer-events: none;\r\n\t\t/* height: 100%; */\r\n\r\n\t\t/* in theory this helps prevent jumping */\r\n\t\twill-change: transform;\r\n\t\t/* -webkit-transform: translate3d(0, 0, 0);\r\n\t\t-moz-transform: translate3d(0, 0, 0);\r\n\t\ttransform: translate3d(0, 0, 0); */\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "AA2HS,kCAAkC,AAAE,CAAC,AAC5C,MAAM,CAAE,CAAC,AACV,CAAC,AACD,GAAG,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC;ACjGQ,uBAAuB,AAAE,CAAC,AAClC,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,UAAU,AAC7B,CAAC;AC2UQ,0BAA0B,AAAE,CAAC,AACnC,cAAc,CAAE,IAAI,CAAC,UAAU,AACjC,CAAC,AACO,sCAAsC,AAAE,CAAC,AAC/C,cAAc,CAAE,GAAG,CAAC,UAAU,AAChC,CAAC,AAID,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,KAAK,CACf,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,CAAC,CACR,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,IAAI,AACf,CAAC;ACvLF,qBAAqB,cAAC,CAAC,AACtB,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,0BAA0B,cAAC,CAAC,AAC3B,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,0BAA0B,cAAC,CAAC,AAC3B,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,AACX,CAAC,AAED,wCAA0B,OAAO,AAAC,CAAC,AAClC,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,oCAAoC,cAAC,CAAC,AACrC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,IAAI,CAIpB,WAAW,CAAE,SAAS,AAIvB,CAAC"
}